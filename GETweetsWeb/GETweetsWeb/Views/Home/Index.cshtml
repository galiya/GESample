
@section scripts
{
    @*<script type="text/javascript"  src="~/Scripts/jquery-1.10.2.js"></script>*@
    <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>  
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
    
    <!-- community version of nv.d3.js -->
    <link href="~/Content/nv.d3.min.css" rel="stylesheet">
    <script src="~/Scripts/nv.d3.min.js"></script>

    
    <script src="~/Scripts/moment.js"></script>
    <script src="~/Scripts/livestamp.min.js"></script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/chroma-js/0.5.9/chroma.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.19/topojson.min.js"></script>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
}

<div class="bs-docs-header headerDiv" id="content" tabindex="-1">
    <div class="container">
        <div class="col-md-3 col-xs-3">
            <img class="geLogo" src="~/Content/images/ge2015_logo.png" />
        </div>
        <div class="col-md-6  col-xs-6 headerAlign">
            <p class="Title">
                <span class="TitlePref">VOTING PREFERENCES ON</span>
                <span class="TitleTwitter">TWITTER</span>
                <img class="twitterLogo" src="~/Content/images/twitter_bird_icon.png" />
            </p>
        </div>
        <div class="col-md-3  col-xs-3 headerAlign">
            <img class="altiusLogo" src="~/Content/images/ge2015_site_altius_logo.png" />
        </div>
    </div>
</div>

<div class="container">
    <div class="row description separate"></div>
    <div class="row description">
        <div class="col-md-5 col-xs-12">
            <p class="leftColumn">#GE2015</p>
            <p class="leftColumn">
                The <b>General Election 2015</b> Twitter tracker, highlights the near real-time voting preferences of Great Britain’s Twitter users.
            </p>
            <img class="leftColumnImg" src="~/Content/images/ge2015_candidate_image.png" />
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-6 col-xs-12">
            <p class="rightColumn">
                As we speak, millions of political conversations about The <b>General Election 2015</b> are happening on Twitter. Many of these messages
                are offering influence and speculation on the outcome of Election Day on <b>Thursday 07 May 2015</b>. This raises two interesting questions - can voting
                preferences on Twitter help us better track and understand Great Britain's offline political preferences, and also, what is the importance of
                Twitter as a medium for political influence?
            </p>
            <p class="rightColumn">
                To help answer these questions and demonstrate the importance of Great Britain’s Twitter conversations, Altius have created a data driven and
                machine-learnt solution. Across the UK and at a given County level you can interact and track how popular a political party is on Twitter.
            </p>
            <p class="rightColumn">
                For more information on Altius and to find out how we created this solution please
                <a id="linkToContact" href="#aboutAltius">scroll down</a>
            </p>
        </div>
    </div>
    <div class="row description separateLarge"></div>
    <div class="row">
        <div class="col-md-5">
            <p class="instruction">Click on an area on the map to explore</p>
            <div class="mapColumn">
                <input type="hidden" id="selectedAreaId" />
                <input type="hidden" id="selectedAreaName" />
                <div id="map" class="map"></div>
            </div>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-6">
            <p class="instruction">Browse left or right using the arrows to see different charts</p>
            <div class="chartColumn">

                <div id="myCarousel" class="carousel slide" data-interval="false">
                    <ol class="carousel-indicators">
                        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                        <li data-target="#myCarousel" data-slide-to="1"></li>
                        <li data-target="#myCarousel" data-slide-to="2"></li>
                        <li data-target="#myCarousel" data-slide-to="3"></li>
                    </ol>
                    <div class="carousel-inner">
                        <div class="item active">
                            <div class="container">
                                <div id="chart-caption0" class="chart-caption"><p>Voting Intention by Political Party</p></div>
                                <img class="loaderImage" id="loaderImage0" src="~/Content/images/ajax-loader.gif" display="none" />
                                <div id="chart0" class="chart">
                                    <svg></svg>
                                </div>
                                <div id="chart-footer0">
                                    <div class="chart-footer-left">
                                        Data time period: 10/04/15 - present day
                                    </div>
                                    <div class="chart-footer-right">
                                        Data last updated: <span id="pageUpdatedOn0" data-livestamp=""></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="item">
                            <div class="container">
                                <div id="chart-caption1" class="chart-caption"><p>Percentage of Total Voting Intention by Political Party (%)</p></div>
                                <img class="loaderImage" id="loaderImage1" src="~/Content/images/ajax-loader.gif" display="none" />
                                <div id="chart1" class="chart">
                                    <svg></svg>
                                </div>
                                <div id="chart-footer1">
                                    <div class="chart-footer-left">
                                        Data time period: 10/04/15 - present day
                                    </div>
                                    <div class="chart-footer-right">
                                        Data last updated: <span id="pageUpdatedOn1" data-livestamp=""></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="item">
                            <div class="container">
                                <div id="chart-caption2" class="chart-caption"><p>Voting Intention by Political Party to Date</p></div>
                                <img class="loaderImage" id="loaderImage2" src="~/Content/images/ajax-loader.gif" display="none" />
                                <div id="chart2" class="chart trend">
                                    <svg></svg>
                                </div>
                                <div id="chart-footer2">
                                    <div class="chart-footer-left">
                                        Data time period: 10/04/15 - present day
                                    </div>
                                    <div class="chart-footer-right">
                                        Data last updated: <span id="pageUpdatedOn2" data-livestamp=""></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="item">
                            <div class="container">
                                <div id="chart-caption3" class="chart-caption"><p>Sentiment of Total Tweets by Political Party</p></div>
                                <img class="loaderImage" id="loaderImage3" src="~/Content/images/ajax-loader.gif" display="none" />
                                <div id="chart3" class="chart multibar">
                                    <svg></svg>
                                </div>
                                <div class="chart-footer" id="chart-footer3">
                                    <div class="chart-footer-left">
                                        Data time period: 10/04/15 - present day
                                    </div>
                                    <div class="chart-footer-right">
                                        Data last updated: <span id="pageUpdatedOn3" data-livestamp=""></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <a class="left carousel-control" href="#myCarousel" data-slide="prev">
                        <span class="icon-prev"></span>
                    </a>
                    <a class="right carousel-control" href="#myCarousel" data-slide="next">
                        <span class="icon-next"></span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="row separate"></div>
    <div class="row">
        <div class="col-md-12 col-xs-12">
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <p class="panel-title moreInfoMenuTitle">
                            <a data-toggle="collapse" data-parent="#accordion" href="#section1">How does it work?</a>
                        </p>
                    </div>
                    <div id="section1" class="panel-collapse collapse">
                        <div class="panel-body moreInfoMenuTextBody">
                            <p>
                                In near real-time we are extracting, classifying and then visualising the analysis of millions of tweets.
                                To do this, there are three key elements which when connected allow us to complete a seamless end-to-end workflow using Microsoft
                                Corporation’s Azure cloud based infrastructure and technology.
                            </p>
                            @*<ol>
                                <li>Data Provision</li>
                                <li>Classification & Analysis</li>
                                <li>Front-end visualisation</li>
                            </ol>*@
                            <p class="moreInfoMenuTextHeader">Data Provision</p>
                            <p> Azure SQL Database was carefully configured to extract, transform and load Twitter conversations.</p>
                            <p class="moreInfoMenuTextHeader">Classification & Analysis</p>
                            <p>
                                Azure Machine Learning Studio, is used to train, build and execute the classification model that
                                identifies voting preference and political party for each tweet in our SQL database. The updated data is then written back and stored on the Azure SQL 
                                Database with the needed voting preference, political party and location assigned.
                            </p>
                            <p class="moreInfoMenuTextHeader">Front-end visualisation</p>
                            <p>Customer webpage is created using open source javascript charting libraries. Web-service APIs call the necessary aggregated data from the database. The data is updated twice daily in order to reduce data processing costs.</p>
                            
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <p class="panel-title moreInfoMenuTitle">
                            <a data-toggle="collapse" data-parent="#accordion" href="#section2">Frequently asked questions</a>
                        </p>
                    </div>
                    <div id="section2" class="panel-collapse collapse">
                        <div class="panel-body moreInfoMenuTextBody">
                            <p class="moreInfoMenuTextHeader">Why county and not constituency mapping?</p>
                            <p>
                                Due to the nuances of Twitter usage, it is very difficult to map the General Election 2015 analysis to constituency level.
                                Twitter users tend to not say exactly where they live or indeed our registered to vote. This is especially true in large cities such as
                                London and Birmingham
                            </p>
                            <p>
                                For the given constituencies that are housed within a relevant county, a county level view provides enough granularity to show how political parties
                                fair in popularity and how this popularity may be reflected or influence the result of the General Election 2015
                            </p>

                            <p class="moreInfoMenuTextHeader">What does voting intention mean?</p>
                            <p>Shows Twitter users' positive voting intention for a given political party. Thereby, suggesting Twitter users’ voting preferences by political party.</p>

                            <p class="moreInfoMenuTextHeader">What does sentiment of total tweets mean?</p>
                            <p>
                                In at tweet, a Twitter user can communicate many positive and negative emotions and preferences towards political parties.
                                Voting Sentiment is showing the total number of positive and negative tweets for each political party.
                            </p>

                            <p class="moreInfoMenuTextHeader">Is Twitter representative of the UK population?</p>
                            <p>
                                No, Twitter is not. Some key voter demographic groups are under or over represented on Twitter. However, Twitter is a key media channel
                                for political parties - just look at the effort of political parties to reach out to voters through this medium of interaction.
                            </p>

                            <p class="moreInfoMenuTextHeader">What is machine learning?</p>
                            <p>
                                Machine learning is a key part of artificial intelligence which enables human insights and computers (machines) to do things such as play
                                games and solve complex statistical-computation problems. Machine learning is normally used to solve very specific types of real world problems
                                that can’t be solved using traditional Data Analysis or Business Intelligence. These problems can be broadly divided into three categories:
                                Forecasting, Classification & Optimization. In this instance, we used machine learning to help train our model which classifies a
                                Twitter user’s individual preferences towards the political parties.
                            </p>

                            <p class="moreInfoMenuTextHeader">Predictive analytics is all the rage, why did you not predict General Election 2015</p>
                            <p>
                                The Data Science Practice are experts in implementing predictive analytics for commercial advantage. However,
                                we also know we have to take things step by step. Accurately predicting the outcome of each of 650 constituencies for a General Election
                                using Twitter is not an easy task. Especially so, with the location mapping nuances referenced above – in 2019 perhaps!
                            </p>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <p class="panel-title moreInfoMenuTitle" >
                            <a data-toggle="collapse" data-parent="#accordion" href="#section3">About Altius</a>
                        </p>
                    </div>
                    <div id="section3" class="panel-collapse collapse in">
                        <a name="aboutAltius"></a>
                        <div class="panel-body moreInfoMenuTextBody">
                            <p>
                                We are a highly focused management consultancy firm who specialise in helping our clients achieve commercial advantage through the use of data.
                                We enable our clients to better <b>understand</b> their customers, prospects & suppliers, <b>model</b> their behaviour and then <b>predict</b> business performance to deliver improved profitability and efficiency.
                            </p>
                            <div class="row">
                                <div class="col-md-15">
                                    <img src="~/Content/images/strategy_icon.png" class="aboutIcon" />
                                    <p class="moreInfoMenuTitle">
                                        <b><a href="http://altius.co.uk/strategy.html" target="_blank" title="Strategy">Strategy</a></b>
                                    </p>
                                    <p>Developing compelling business strategies that enable companies to drive performance and gain new insights from the use of information.</p>
                                </div>
                                <div class="col-md-15">
                                    <img src="~/Content/images/technology_icon.png" />
                                    <p class="moreInfoMenuTitle">
                                        <b><a href="http://altius.co.uk/solutions.html" target="_blank" title="Technology">Technology</a></b>
                                    </p>
                                    <p>
                                        Implementing advanced technology to allow companies to convert their data to information.
                                        Our technology solution include Data Warehousing, Big Data and Machine learning solutions.
                                    </p>
                                </div>

                                <div class="col-md-15">
                                    <img src="~/Content/images/datascience_icon.png" class="aboutIcon" />
                                    <p class="moreInfoMenuTitle">
                                        <b><a href="http://altius.co.uk/Data-Science.html" target="_blank" title="Data Science">Data Science</a></b>
                                    </p>
                                    <p>
                                        Predictive analytics solutions that use artificial intelligence solutions to uncover hidden patterns, advanced forecasting and
                                        process optimisation giving greater business insight.
                                    </p>
                                </div>
                                <div class="col-md-15">
                                    <img src="~/Content/images/digitaldesign_icon.png" class="aboutIcon" />
                                    <p class="moreInfoMenuTitle">
                                        <b><a href="http://altius.co.uk/visual-design.html" target="_blank" title="Design">Design</a></b>
                                    </p>
                                    <p>
                                        Ensuring that the message is clearly communicated by applying User Interface (UI) and User Experience (UX)
                                        design principles to transform how data is presented and visualised across devices.
                                    <p>
                                </div>
                                <div class="col-md-15">
                                    <img src="~/Content/images/support_icon.png" class="aboutIcon" />
                                    <p class="moreInfoMenuTitle">
                                        <b><a href="http://altius.co.uk/managed-services.html" target="_blank" title="Support">Support</a></b>
                                    </p>
                                    <p>
                                        A full managed service solution that provides business, technical and infrastructure support for our clients data infrastructure.
                                        Our services include cloud, hosting, application and insight services.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row separate"></div>
</div>
<footer class="bs-docs-footer footer">
    <div class="container">
        <div class="col-md-3 col-xs-12 socialIcons">
            <a href="http://altius.co.uk/" target="_blank" title="Altius"><img class="altiusIcon" src="~/Content/images/altius_icon.png" /></a>
            <a href="http://www.linkedin.com/company/altius-consulting_2" target="_blank" title="LinkedIn"><img class="linkedinIcon" src="~/Content/images/linkedin_icon.png" alt="altius-linkedin" /></a>
            <a href="https://twitter.com/AltiusBI" target="_blank" title="Twitter" alt="altius-twitter"><img class="twitterIcon" src="~/Content/images/twitter_icon.png" /></a>
        </div>
        <div class="col-md-6  col-xs-12">
            <p class="text">
                +44 (0)1483 418628 | <a href="mailto:info@altius.co.uk">info@altius.co.uk</a> | <a href="http://altius.co.uk/" target="_blank" title="Altius">www.altius.co.uk</a>
            </p>
        </div>
        <div class="col-md-3  col-xs-12 headerAlign">
            <p class="text">
                &#169; Copyright 2015 Altius
            </p>
        </div>
    </div>


</footer>

<script>
    // Copyright (c) 2013 Ryan Clark
    // https://gist.github.com/rclark/5779673
    L.TopoJSON = L.GeoJSON.extend({
      addData: function(jsonData) {
        if (jsonData.type === "Topology") {
          for (key in jsonData.objects) {
            geojson = topojson.feature(jsonData, jsonData.objects[key]);
            L.GeoJSON.prototype.addData.call(this, geojson);
          }
        }
        else {
          L.GeoJSON.prototype.addData.call(this, jsonData);
        }
      }
    });
</script>

<script type="text/javascript">

    var map;
    var currentChartId = 0;
    var currentChart = {
        0: { code: "netVote", type: "bar", api: "/api/NetVote", xaxis: "Political Party", yaxis: "Number of Tweets" },
        1: { code: "netVotePercent", type: "bar", api: "/api/NetVotePercent", xaxis: "Political Party", yaxis: "Percentage of Voting Sentiment (%)" },
        2: { code: "netVoteTrend", type: "trend", api: "/api/NetVoteTrend", xaxis: "Date", yaxis: "Number of Tweets" },
        3: { code: "sentiment", type: "multibar", api: "/api/SentimentVote", xaxis: "Political Party", yaxis: "Number of Tweets" }
        //4: { code: "swing", type: "swing", api: "/api/Swing" }
    };

    var selectedAreaId = 0;
    var selectedAreaName = "Great Britain";

    //draw a different chart when a new chart type is selected / carousel is scrolled to the sides
    $('.carousel').on('slide.bs.carousel', function (e) {
        chartClean();
        currentChartId = $(e.relatedTarget).index();
        chartLoad();
    });

    //update chart when a specific map area is selected
    $('#selectedAreaId').on("change", function () {
        selectedAreaId = $(this).val();
        if (selectedAreaId === '') {
            selectedAreaId = 0;
            $('#selectedAreaName').val("Great Britain");
        }
        chartLoad();
    }).triggerHandler('change');

    // update chart timestamp
    function updateLivestamp(lastUpdated) {
        jQuery('#pageUpdatedOn'+currentChartId).livestamp(lastUpdated);
    }

    $(function () {
        mapLoad();
    });

    var mapInfoBox;
    var defaultMapFillColor = "#f0f0f0";
    var activeMapAreaFillColor = "#636363";

    var selectedMapArea;
    var selectedMapAreaFillColor;
    var isMapAreaClicked = false;
    var mapVoteColorData = null;

    function resetToDefaultMap() {
        if (isMapAreaClicked) {
            isMapAreaClicked = false;
        }
        mapInfoBox.update(null, false);

        unselectMapArea(selectedMapArea);
        selectedAreaId = 0;
        $('#selectedAreaName').val("Great Britain");

        chartLoad();
    }

    function handleLayer(layer) {

        function getFillColor(geoshapeid) {
            if (!mapVoteColorData) {
                return defaultMapFillColor;
            }
            else {
                if (!mapVoteColorData.data[geoshapeid]) {
                    return defaultMapFillColor;
                }
                return mapVoteColorData.data[geoshapeid];
            }
        }

        // defines fillcolor for a specific map area
        fillColor = getFillColor(layer.feature.properties.geoshapeid);

        layer.setStyle({
            fillColor: fillColor,
            fillOpacity: 1,
            color: '#555',
            weight: 1,
            opacity: 0.5
        });

        // defines client events available for user
        layer.customFillColor = fillColor;
        layer.addEventListener("click", selectMapArea, false);
        layer.addEventListener("mouseover", updateInfoBox, false);
        layer.addEventListener("mouseout", resetInfoBox, false);
    }

    function selectMapArea(e) {
        if (selectedMapArea) {
            unselectMapArea(selectedMapArea);
        }

        //update selectedMapArea and make a note of the fill color
        var layer = e.target;
        selectedMapArea = layer;

        var layerFillColor = e.target.customFillColor;
        selectedMapAreaFillColor = layerFillColor;

        //update mapInfoBox and hidden inputs which will drive an update of the charts
        mapInfoBox.update(layer.feature.properties.name, true);

        $('#selectedAreaName').val(layer.feature.properties.name);
        $('#selectedAreaId').val(layer.feature.properties.geoshapeid).change();

        // highlight selected map area on the map
        layer.setStyle({
            fillColor: activeMapAreaFillColor,
            color: '#555',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.7
        });

        if (layer && !L.Browser.ie && !L.Browser.opera) {
            layer.bringToFront();
        }
    }

    function unselectMapArea(layer) {
        selectedMapArea = null;

        // show previously selected area as a normal map area (without any hightlighting)
        layer.setStyle({ fillColor: selectedMapAreaFillColor, fillOpacity: 1, color: '#555', weight: 1, opacity: '.5' });
        if (layer && !L.Browser.ie && !L.Browser.opera) {
            layer.bringToBack();
        }
    }

    function resetInfoBox(e) {
        if (selectedMapArea) {
            mapInfoBox.update(selectedMapArea.feature.properties.name, true);
        }
        else {
            mapInfoBox.update("Great Britain", false);
        }
    }

    function updateInfoBox(e) {
        var layer = e.target;
        mapInfoBox.update(layer.feature.properties.name, true);
    }

    
    function mapLoad() {
       
        $.ajax({
            type: "GET",
            url: "/api/MapVote",
            cache: false,
            dataType: 'json',
            success: function (data) {
                // given the data update each map area and change the fill color for each of the area
                mapVoteColorData = data;
    
                topoLayer.eachLayer(function (layer) {
                    handleLayer(layer);
                });
            },
            error: function (response) {
                //$('#loaderImage' + currentChartId).hide();
            }
        });

        // create a map object and set the view to the coordinates 44,-31 with a zoom of 10
        map = L.map('map', { maxZoom: 8, minZoom: 5, zoomControl: false, attributionControl: false });
        map.setView([55.6600933, -5.259008], 5);   

        new L.control.zoom({ position: 'topright' }).addTo(map);

        // Disable drag and zoom handlers.
        //map.dragging.disable();
        //map.touchZoom.disable();
        //map.doubleClickZoom.disable();
        //map.scrollWheelZoom.disable();

        // Disable tap handler, if present.
        if (map.tap) map.tap.disable();


        // create topoJson layers on the map
        var topoLayer = new L.TopoJSON();
        $.getJSON('/Content/map.topo.json').done(addTopoData);
        function addTopoData(topoData) {
            topoLayer.addData(topoData);
            topoLayer.addTo(map);
            topoLayer.eachLayer(handleLayer);
        }

        // add an info box to the map
        mapInfoBox = L.control({position: 'topleft'});
        mapInfoBox.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'mapRegionText'); // create a div with a class "mapInfoBox"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        mapInfoBox.update = function (name, showResetButton) {

            if (name) {

                this._div.innerHTML = name;
                if (showResetButton)
                    this._div.innerHTML += '<div><button class="resetMap" onclick="resetToDefaultMap()">Reset to Great Britain</button></div>';
                else {
                
                }
            }
            else {
                this._div.innerHTML = '<p>Great Britain</p>';
            }
            //this._div.innerHTML += '<br/><p style="font-text:smaller">Click on an area to explore charts</p>';
        };

        mapInfoBox.addTo(map);
    }

    function chartClean()
    {
        d3.select('#chart' + currentChartId).selectAll("*").remove();
        d3.select('#chart' + currentChartId).append('svg');
    }

    function chartOnPreLoad() {
        $('#chart-footer' + currentChartId).hide();
        $('#loaderImage' + currentChartId).show();
    }

    function chartOnAfterLoad() {
        $('#chart-footer' + currentChartId).show();
        $('#loaderImage' + currentChartId).hide();
    }

    function chartLoad() {
        //var customNoDataText = "No data available for " + $('#selectedAreaName').val()
        var customNoDataText = "No data available"

        //console.log($('#chart-caption' + currentChartId).find("p").html())

        var newChartCaptionText = "<br />" + "(" + $('#selectedAreaName').val() + ")";
        var indexBr = $('#chart-caption' + currentChartId).find("p").html().indexOf("<br>");
        if (indexBr > 0) {
            newChartCaptionText = $('#chart-caption' + currentChartId).find("p").html().substring(0, indexBr) + newChartCaptionText;
        }
        else {
            newChartCaptionText = $('#chart-caption' + currentChartId).find("p").html() + newChartCaptionText;
        }
        

        //var newChartCaptionText = $('.chart-caption' + currentChartId).find("p").text() ;
        $('#chart-caption' + currentChartId).find("p").html(newChartCaptionText);

        var currentChartInfo = currentChart[currentChartId];
        chartOnPreLoad();

        $.ajax({
            type: "GET",
            url: currentChartInfo.api,
            data: { 'id': selectedAreaId },
            cache: false,
            dataType: 'json',
            success: function (data) {
                var chartData = null;

                if (currentChartInfo.code == "netVote") {
                    chartData = prepareNetVoteData(data, currentChartInfo);
                }
                else if (currentChartInfo.code == "netVoteTrend") {
                    chartData = prepareNetVoteTrendData(data, currentChartInfo);
                }
                else if (currentChartInfo.code == "netVotePercent") {
                    chartData = prepareNetVotePercentData(data);
                }
                else if (currentChartInfo.code == "sentiment") {
                    chartData = prepareSentimentData(data);
                }
                //else if (currentChartInfo.code == "swing") {
                //chartData = SwingChartData(data)
                //}

                if (chartData) {// && chartData[0].values.length > 0) {
                    if (currentChartInfo.type == "bar") {
                        drawBarChart(chartData, currentChartInfo)
                    }
                    else if (currentChartInfo.type == "trend") {
                        drawLineChart(chartData, currentChartInfo)
                    }
                    else if (currentChartInfo.type === "multibar") {
                        drawMultiBarChart(chartData, currentChartInfo)
                    }
                    //else if (currentChartInfo.type == "swing") {
                    // swing
                    //drawD3SwingChartObject(chartData)
                    //}
                }
                else {
                    //delete any chart related objects
                    d3.select('#chart' + currentChartId).selectAll("*").remove()

                    

                    //create a new "chart" with No Data text message
                    var svg = d3.select('#chart' + currentChartId).append('svg');
                    
                    svg.append("text")
                        .attr("x", parseInt(svg.style("width")) / 2)
                        .attr("y", "35")
                        .attr("dy", "-.7em")
                        .attr("class", "nvd3 nv-noData")
                        .style("text-anchor", "middle")
                        .text(customNoDataText);
                }

                chartOnAfterLoad()
            },
            error: function (response) {
                $('#loaderImage' + currentChartId).hide();
            }
        });
    };


    function drawMultiBarChart(chartData, currentChartInfo) {

        var formatter = d3.format(",d"),
            dataFormat = ",.f";

        //console.log(chartData)

        nv.addGraph(function () {

            var width = 400, height = 440;

            var mq = window.matchMedia('(min-width: 400px)');
            if (mq.matches) {
                // window width is at least 500px
                //console.log("window width is at least 400px")
            }
            else {
                // window width is less than 500px
                //console.log("window width is less than 400px")
                width = 300;
                height = 350;
            }

            var chart = nv.models.multiBarHorizontalChart()
                .margin({ top: 30, right: 1, bottom: 50, left: 100 })
                .width(width)
                .height(height)
                .x(function (d) { return d[0] })
                .y(function (d) { return d[1] })
                .valueFormat(function (d) { return formatter(d) })
                //.margin({ top: 30, right: 20, bottom: 50, left: 175 })
                .showValues(true)           //Show bar value next to each bar.
                .showYAxis(true)
                .tooltips(false)             //Show tooltips on hover.
                .showControls(false);        //Allow user to switch between "Grouped" and "Stacked" mode.


            chart.xAxis
                .axisLabel(currentChartInfo.xaxis)
                //.tickFormat(function (d) { console.log(d); return d; });

            chart.xAxis.tickValues(chartData.labels);

            chart.yAxis
                .axisLabel(currentChartInfo.yaxis)
                .tickFormat(d3.format(',d'));
                //.tickFormat(function (d) { return formatter(d); })

            //chart.color(['#FF0000', '#0026FF'])


            d3.select('#chart' + currentChartId + ' svg')
                .datum(chartData[0].values)
                .transition().duration(500)
                .call(chart);

            d3.select(".nv-x").select(".nv-axislabel")
                .attr("dx", -180)
                .attr("dy", -40)

            d3.select(".nv-y").select(".nv-axislabel")
                .attr("dx", 150)
                


           
            nv.utils.windowResize(chart.update);

            return chart;

        });
    };

    function drawBarChart(chartData, currentChartInfo) {
        var formatter, dataFormat;

        if (currentChartInfo.code == "netVote") {
            formatter = d3.format(",d");
            dataFormat = ",.f";
        }
        else if (currentChartInfo.code == "netVotePercent") {
            formatter = d3.format(",.2%");
            dataFormat = "%";
        }


        nv.addGraph(function () {

            var width = 420, height = 440;

            var mq = window.matchMedia('(min-width: 400px)');
            if (mq.matches) {
                // window width is at least 500px
                //console.log("window width is at least 400px")
            }
            else {
                // window width is less than 500px
                //console.log("window width is less than 400px")
                width = 300;
                height = 350;
            }


            if (!mq.matches) {
                
            }

            generate:
                var chart = nv.models.discreteBarChart()
                    .x(function (d) { return d.label })
                    .y(function (d) { return d.value })
                    .valueFormat(function (d) { return formatter(d) })
                    .staggerLabels(true)
                    .showValues(true)
                    .tooltips(false)
                    .width(width)
                    .height(height);

            chart.color(function (d) { return d.color });

            chart.xAxis.axisLabel(currentChartInfo.xaxis);

            // generate a new ticks on the y axis
            var tmpTicks = [[]];
            if (currentChartInfo.code == "netVote") {
                var closest10N = Math.pow(10, Math.floor(Math.log(chartData[0].maxValue) / Math.LN10));   // find the closest value 10^N to the given Max Value

                var maxTickValue = 0;
                if ((chartData[0].maxValue - closest10N) / closest10N <= 0.5) {  // additional logic to improve how values are spread on the chart
                    maxTickValue = closest10N + Math.pow(10, Math.floor(Math.log(chartData[0].maxValue - closest10N) / Math.LN10));
                }
                else {
                    maxTickValue = 5 * closest10N;
                }

                // generate new tick values
                var maxTickValueCount = 5;
                var tickVal = 0;
                for (tickValCount = 0; tickValCount < maxTickValueCount; tickValCount++) {
                    tickVal += Math.floor(maxTickValue/maxTickValueCount);
                    tmpTicks[0].push(tickVal);
                }

            }
            else if (currentChartInfo.code == "netVotePercent") {
                tmpTicks = [[0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.7, 0.8, 0.9, 1]];
            }

            // use generated tickValues on yAxis            
            chart.yAxis
                .tickFormat(function (d) { return d3.format(dataFormat)(d); })
                .tickValues([].concat.apply([], tmpTicks))
                .axisLabel(currentChartInfo.yaxis);

            d3.select('#chart' + currentChartId + ' svg')
              .datum(chartData)
              .transition().duration(500)
              .call(chart)
            ;

            nv.utils.windowResize(chart.update);

            return chart;
        })
    };

    function drawLineChart(chartData, currentChartInfo) {
        nv.addGraph(function () {

            var width = 420, height = 440;

            var mq = window.matchMedia('(min-width: 400px)');
            if (mq.matches) {
                // window width is at least 500px
                //console.log("window width is at least 400px")
            }
            else {
                // window width is less than 500px
                //console.log("window width is less than 400px")
                width = 300;
                height = 350;
            }

            generate:
                var chart = nv.models.lineChart()
                    .x(function (d) { return d[0] })
                    .y(function (d) { return d[1] })
                    .options({
                        transitionDuration: 300,
                        useInteractiveGuideline: true
                    })
                    .width(width)
                    .height(height);

            var tmpTickDates = chartData[0].values.map(function (e) { return e.values.map(function (d) { return d[0]; }); });

            chart.xAxis
                .showMaxMin(true)
                .tickFormat(function (d) { return d3.time.format('%d/%m')(new Date(d)); })
                .tickValues([].concat.apply([], tmpTickDates))
                .rotateLabels(-45)
                .axisLabel(currentChartInfo.xaxis);


            var tmpTicks = [[]];
            var valueRange = chartData[0].maxValue - chartData[0].minValue;

            // generate new tick values
            var maxTickValueCount = 5;
            var tickVal = chartData[0].minValue;
            for (tickValCount = 0; tickValCount < maxTickValueCount - 1; tickValCount++) {
                tickVal += Math.round(valueRange / maxTickValueCount);
                tmpTicks[0].push(tickVal);
            }

            chart.yAxis
                .tickFormat(d3.format(',.1'))
                .tickValues([].concat.apply([], tmpTicks))                     
                .axisLabel(currentChartInfo.yaxis);


            d3.select('#chart' + currentChartId + ' svg')
              .datum(chartData[0].values)
              .transition().duration(500)
              .call(chart);

            nv.utils.windowResize(function () { chart.update() });

            return chart;
        })
    };

    function prepareNetVotePercentData(data) {
        updateLivestamp(data.lastUpdated)

        if (data.data == null) {
            return null;
        }

        dataValues = data.data;

        var vals = [];
        for (var i in dataValues) {
            vals.push({ label: dataValues[i].name, value: dataValues[i].percent, color: dataValues[i].color });
        }
        return [{
            values: vals,
            key: "NetVotePercentChart"
        }];
    };

    function prepareNetVoteData(data, currentChartInfo) {
        updateLivestamp(data.lastUpdated)

        if (data.data == null) {
            return null;
        }

        dataValues = data.data;

        var vals = [];
        var min = dataValues[0].count
        var max = dataValues[0].count;
        var colors = [];

        for (var i in dataValues) {
            if (dataValues[i].count < min) {
                min = dataValues[i].count
            }

            if (dataValues[i].count > max) {
                max = dataValues[i].count
            }
            vals.push({ label: dataValues[i].name, value: dataValues[i].count, color: dataValues[i].color });
        }

        return [{
            values: vals,
            key: "NetVoteChart",
            minValue: min,
            maxValue: max
        }];
    };

    function prepareNetVoteTrendData(data) {

        updateLivestamp(data.lastUpdated)

        if (data.data == null) {
            return null;
        }
        
        dataValues = data.data

        minValue = dataValues[0].values[0][1];
        maxValue = dataValues[0].values[0][1];

        for (i in dataValues) {
            var seriesValues = dataValues[i];
            for (j in seriesValues.values) {
                if (seriesValues.values[j][1] > maxValue) {
                    maxValue = seriesValues.values[j][1];
                }
                if (minValue > seriesValues.values[j][1]) {
                    minValue = seriesValues.values[j][1];
                }
            }
        }
        return [{
            values: dataValues,
            key: "TrendChart",
            minValue: minValue,
            maxValue: maxValue
        }];
    };

    
    function prepareSentimentData(data) {

        updateLivestamp(data.lastUpdated);
        if (data.data == null) {
            return null;
        }
        
        var dataValues = data.data;

        var labelValues = []
        for (var i in dataValues[0].values) {
            labelValues.push(dataValues[0].values[i][0]);
        }

        var colors = []
        for (var i in dataValues)
        {
            colors.push(dataValues[i].color);
        }
        //console.log(colors);

        return [{
            values: dataValues,
            key: "MultiBarChart",
            labels: labelValues,
            color: colors
        }];
    };

</script>